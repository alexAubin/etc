
runtime! debian.vim     " Properly set various options to work with packages on debian

" #########################################
" ##   Vundle conf or whatever this is   ##
" #########################################

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

Plugin 'dense-analysis/ale'

Plugin 'preservim/tagbar'

Plugin 'airblade/vim-gitgutter'

Plugin 'cespare/vim-toml'

Plugin 'maralla/vim-toml-enhance'

" All of your Plugins must be added before the following line

call vundle#end()            " required
filetype plugin indent on    " required

" #########################################
" ##   VIM Airline                       ##
" #########################################

set laststatus=2 " always activate airline bar
let g:airline_powerline_fonts = 1 " activate powerline fonts (github.com/powerline/fonts) if installed
let g:airline#extensions#tabline#enabled = 1

let g:airline_theme='wombat'

" #########################################
" ##   Ale / Flake / PEP 8               ##
" #########################################

let b:ale_linters = ['flake8']
let g:ale_python_flake8_options = "--ignore E501,E218,W503,E402,E126,E121"
let g:ale_list_window_size = 5

autocmd ColorScheme * hi ALEErrorSign ctermfg=1
autocmd ColorScheme * hi ALEWarningSign ctermfg=5

" #########################################
" ##   Tagbar                            ##
" #########################################

nmap <F8> :TagbarToggle<CR>

"let g:gitgutter_set_sign_backgrounds = 1
set updatetime=1000
autocmd ColorScheme * hi GitGutterAdd    ctermfg=2
autocmd ColorScheme * hi GitGutterChange ctermfg=3
autocmd ColorScheme * hi GitGutterDelete ctermfg=1

" #########################################
" ##   Regular vim configuration         ##
" #########################################

set nocompatible        " Compatibility with Vi
setlocal spelllang=fr

" Jump to the last position when reopening a file
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Load indentation rules and plugins according to detected filetype
filetype indent on
filetype plugin on
let g:tex_flavor='latex'
let g:tex_indent_brace=0

" Editor option
set showcmd             " Show command in status line
set showmatch           " Show matching brackets.
set number              " Enable numbers in front of lines
set mouse=a             " Enable mouse usage (all modes)
set autoindent          " Automatic indentation
set shiftwidth=4        " Set tab width to 4 characters
set expandtab           " Replace tab character by spaces

" Search
set incsearch           " Incremental search
set hlsearch            " Enable highlighted words in incremental search.
set ignorecase          " Do case insensitive matching
set smartcase           " Do smart case matching

" Stuff
set autowrite           " Automatically save before commands like :next and :make
set hidden              " Hide buffers when they are abandoned
set scrolloff=2         " Set visible lines over or under the block
set noswapfile
set tabstop=4
set linebreak
set autochdir           " Changer automatiquement de repertoire de travail.

"set textwidth=80
"set colorcolumn=80      " Display limit at column=90

" Syntax highlighting
syntax on               " Syntax highlighting
set background=dark     " If using dark background

if &t_Co >= 256
    colorscheme monokai
else
    colorscheme elflord
endif
" Adding .pde as cpp files (for Arduino dev)
au BufNewFile,BufRead *.pde set filetype=cpp

" Set encoding to UTF8
set encoding=utf-8

" Toggle pasting mode
set pastetoggle=<F10>

" Automatically remove trailing spaces in some files
function! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre *.C   : call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.c   : call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.cpp : call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.h   : call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.tex : call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.py  : call <SID>StripTrailingWhitespaces()
